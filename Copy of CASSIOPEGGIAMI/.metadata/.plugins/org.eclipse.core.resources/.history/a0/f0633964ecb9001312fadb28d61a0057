package TileMap;

import java.awt.*;
import java.awt.image.*;

import java.io.*;
import javax.imageio.ImageIO;

import Main.GamePanel;

public class mattonciniMap {
	
	// position
	private double x;
	private double y;
	
	// bounds
	private int xmin;
	private int ymin;
	private int xmax;
	private int ymax;
	
	
	// map
	private int[][] map;
	private int mattonciniSize;
	private int numRows;
	private int numCols;
	private int width;
	private int height;
	
	// i mattoncini
	private BufferedImage mattonciniset;
	private int nummattoncinisAcross;
	private mattoncini[][] mattoncinis;
	
	// drawing
	private int rowOffset;
	private int colOffset;
	private int numRowsToDraw;
	private int numColsToDraw;
	
	public mattonciniMap(int mattonciniSize) {
		this.mattonciniSize = mattonciniSize;
		numRowsToDraw = GamePanel.HEIGHT / mattonciniSize + 2;
		numColsToDraw = GamePanel.WIDTH / mattonciniSize + 2;

	}
	
	public void loadmattoncinis(String s) {
		
		try {

			mattonciniset = ImageIO.read(
				getClass().getResourceAsStream(s)
			);
			nummattoncinisAcross = mattonciniset.getWidth() / mattonciniSize;
			mattoncinis = new mattoncini[2][nummattoncinisAcross];
			
			BufferedImage subimage;
			for(int col = 0; col < nummattoncinisAcross; col++) {
				subimage = mattonciniset.getSubimage(
							col * mattonciniSize,
							0,
							mattonciniSize,
							mattonciniSize
						);
				mattoncinis[0][col] = new mattoncini(subimage, mattoncini.NORMAL);
				subimage = mattonciniset.getSubimage(
							col * mattonciniSize,
							mattonciniSize,
							mattonciniSize,
							mattonciniSize
						);
				mattoncinis[1][col] = new mattoncini(subimage, mattoncini.BLOCKED);
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void loadMap(String s) {
		
		try {
			
			InputStream in = getClass().getResourceAsStream(s);
			BufferedReader br = new BufferedReader(
						new InputStreamReader(in)
					);
			
			numCols = Integer.parseInt(br.readLine());
			numRows = Integer.parseInt(br.readLine());
			map = new int[numRows][numCols];
			width = numCols * mattonciniSize;
			height = numRows * mattonciniSize;
			
			xmin = GamePanel.WIDTH - width;
			xmax = 0;
			ymin = GamePanel.HEIGHT - height;
			ymax = 0;
			
			String delims = "\\s+";
			for(int row = 0; row < numRows; row++) {
				String line = br.readLine();
				String[] tokens = line.split(delims);
				for(int col = 0; col < numCols; col++) {
					map[row][col] = Integer.parseInt(tokens[col]);
				}
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public int getmattonciniSize() { return mattonciniSize; }
	public double getx() { return x; }
	public double gety() { return y; }
	public int getWidth() { return width; }
	public int getHeight() { return height; }
	
	public int getType(int row, int col) {
		int rc = map[row][col];
		int r = rc / nummattoncinisAcross;
		int c = rc % nummattoncinisAcross;
		return mattoncinis[r][c].getType();
	}
	
	
	
	public void setPosition(double x, double y) {
		
		this.x += (x - this.x) ;
		this.y += (y - this.y);
		
		fixBounds();
		
		colOffset = (int)-this.x / mattonciniSize;
		rowOffset = (int)-this.y / mattonciniSize;
		
	}
	
	private void fixBounds() {
		if(x < xmin) x = xmin;
		if(y < ymin) y = ymin;
		if(x > xmax) x = xmax;
		if(y > ymax) y = ymax;
	}
	
	public void draw(Graphics2D g) {
		
		for(
			int row = rowOffset;
			row < rowOffset + numRowsToDraw;
			row++) {
			
			if(row >= numRows) break;
			
			for(
				int col = colOffset;
				col < colOffset + numColsToDraw;
				col++) {
				
				if(col >= numCols) break;
				
				if(map[row][col] == 0) continue;
				
				int rc = map[row][col];
				int r = rc / nummattoncinisAcross;
				int c = rc % nummattoncinisAcross;
				
				g.drawImage(
					mattoncinis[r][c].getImage(),
					(int)x + col * mattonciniSize,
					(int)y + row * mattonciniSize,
					null
				);
				
			}
			
		}
		
	}
	
}



















