package logica;

import javax.swing.RepaintManager;

import Grafica.*;
public abstract class AbstractCharacter extends AbstractStaticObject implements Character
{
	public abstract void ScalaLife();
    private final int defaultX;
    private final int defaultY;
    
    private int direction;
private WorldManager worldManager;
    
    protected boolean dead = false;
    protected boolean left;
	protected boolean right;
	protected boolean up;
	protected boolean down;
	protected boolean jumping;
	protected boolean falling;
	private boolean gliding;
    protected boolean walk = true;
    protected boolean jump = false;
    protected boolean run= false;
    protected boolean shoot = false;
    protected boolean KeyJump = false;
    protected boolean KeyRun= false;
    protected boolean KeyShoot = false;
    protected boolean posizioneCambiata = false;
    protected World world;
    protected int currentAction;
double	moveSpeed = 0.3;
double	maxSpeed = 1.6;
double stopSpeed = 0.4;
double	fallSpeed = 0.15;
double	maxFallSpeed = 4.0;
double jumpStart = -4.8;
double stopJumpSpeed = 0.3;

private static final int IDLE = 0;
private static final int WALKING = 1;
private static final int JUMPING = 2;
private static final int FALLING = 3;
private static final int GLIDING = 4;


    /**
     */
    protected AbstractCharacter( int defaultX, int defaultY, final World world)
    {
        super(defaultX, defaultY);
        this.defaultX = defaultX;

        this.defaultY = defaultY;
        this.world = world;
    }

    public int getDirection()
    {
        return direction;
    }

    public boolean getCambiamento()
    {
        return posizioneCambiata;
    }
    
    public void setCambiamento(boolean posizioneCambiata){
    	this.posizioneCambiata=posizioneCambiata;
    }
    
    public boolean isDead()
    {
        return dead;
    }

    @Override
    public void reset()
    {
        setX(defaultX);
        setY(defaultY);
        dead = false;
    }

    @Override
    public void setDirection( int direction)
    {
        this.direction = direction;
        
    }
    public void setLeft(boolean b) { left = b; }
	public void setRight(boolean b) { right = b; }
	public void setUp(boolean b) { up = b; }
	public void setDown(boolean b) { down = b; }
	public void setJumping(boolean b) { jumping = b; }

    @Override
    public void update()
    {
    	getNextPosition();
    	if(dy > 0) {
			if(gliding) {
				if(currentAction != GLIDING) {
					currentAction = GLIDING;
					width = 30;
				}
			}
			else if(currentAction != FALLING) {
				currentAction = FALLING;
				animation.setFrames(sprites.get(FALLING));
				animation.setDelay(100);
				width = 30;
			}
		}
		else if(dy < 0) {
			if(currentAction != JUMPING) {
				currentAction = JUMPING;
				animation.setFrames(sprites.get(JUMPING));
				animation.setDelay(-1);
				width = 30;
			}
		}
		else if(left || right) {
			if(currentAction != WALKING) {
				currentAction = WALKING;
				animation.setFrames(sprites.get(WALKING));
				animation.setDelay(40);
				width = 30;
			}
		}
		else {
			if(currentAction != IDLE) {
				currentAction = IDLE;
				animation.setFrames(sprites.get(IDLE));
				animation.setDelay(400);
				width = 30;
			}
		}
//         double y = getY();
//         double x = getX();
////        setCambiamento(false);
//        
////        	case DiscescaDoppioSaltoDX:
////        		setY(y+2);
////        		controlloGravita(x-1,y+2);
////        		break;
////        	case DiscescaDoppioSaltoSX:
////        		setY(y-2);
////        		controlloGravita(x-1,y-2);
////        		break;
//        		
//        if(up){
//            	    if ((!(world.getCell((int)x-1,(int) y) instanceof EnvironmentGround)) &&x>=0)
//	                {
//	                		
//	                	setX(x - 1);
//	                	System.out.println("UP "+getX()+" "+getY());
//	//                	world.update();
//		                
//	//	                controlloGravit√†(x-1,y);
//		                
//	                }
//	                else
//	                {
//	                	System.out.println("UP ELSE "+getX()+" "+getY());
//	                	System.out.print("stop su");    
//	                }
//            	
//                
//            	
////            	break;
//        }
//
//                
//            if(down)
//            	{
//            		if (((!(world.getCell((int)x+1,(int) y) instanceof EnvironmentGround)) && (!(world.getCell((int)x+1,(int) y) instanceof EnvironmentElevator))
//            				&& x<world.getHeight()-1))
//            		{
////            			if(world.getCell(x+1, y) instanceof EnvironmentElevator)
////            			{
////            				System.out.println("down "+x+" "+y);
////              	  		setX(x + 1);
////            			}
////            			else
////            			{
//            				setX(x + 1);
//            				System.out.println("down "+x+" "+y);
//            				controlloGravita(x+1,y);
////            			}
//            		}
//            		else
//            		{
//            			System.out.println("down ELSE"+x+" "+y);
//            			System.out.print("stop giu");
//            		}
//            	
//        }
//            	
//            	
//            if(left)
//            	{
//            		if (!(world.getCell((int)x, (int)y-1) instanceof EnvironmentGround) && y>=0)
//            		{
//            			System.out.println("left "+x+" "+y);
//            			setY(y - 1);
//            			controlloGravita(x,y-1);
//            		}
//            		else
//            		{
//            			System.out.println("left ELSE"+x+" "+y);
//            			System.out.print("stop left");
//	               
//            		}
//            	}
//
//            if (right) {
//	           		if (!(world.getCell((int)x, (int)y+1) instanceof EnvironmentGround) && y<world.getWidth()-1)
//            		{
//            			System.out.println("right "+x+" "+y);
//            			setY(y + 1);
//            			controlloGravita(x,y+1);
//            		}
//            		else
//            		{
//            			System.out.println("right ELSE"+x+" "+y);
//            			System.out.print("stop right");
//            		}
//
//            	}
//            
//            if(jumping && !falling) {
//    		
//    			y = jumpStart;
//    			falling = true;
//    		}
//    		
//    		// falling
//    		if(falling) {
//    			
//    			if(dy > 0 && gliding) dy += fallSpeed * 0.1;
//    			else dy += fallSpeed;
//    			
//    			if(dy > 0) jumping = false;
//    			if(dy < 0 && !jumping) dy += stopJumpSpeed;
//    			
//    			if(dy > maxFallSpeed) dy = maxFallSpeed;
//    			
//    		}
            

    }

private void getNextPosition() {
		
		// movement
		if(left) {
			dx -= moveSpeed;
			if(dx < -maxSpeed) {
				dx = -maxSpeed;
			}
		}
		else if(right) {
			dx += moveSpeed;
			if(dx > maxSpeed) {
				dx = maxSpeed;
			}
		}
		else {
			if(dx > 0) {
				dx -= stopSpeed;
				if(dx < 0) {
					dx = 0;
				}
			}
			else if(dx < 0) {
				dx += stopSpeed;
				if(dx > 0) {
					dx = 0;
				}
			}
		}
		
		// cannot move while attacking, except in air
		
		// jumping
		if(jumping && !falling) {
//			sfx.get("jump").play();
			dy = jumpStart;
			falling = true;
		}
		
		// falling
		if(falling) {
			
			if(dy > 0 && gliding) dy += fallSpeed * 0.1;
			else dy += fallSpeed;
			
			if(dy > 0) jumping = false;
			if(dy < 0 && !jumping) dy += stopJumpSpeed;
			
			if(dy > maxFallSpeed) dy = maxFallSpeed;
			
		}
		
	} 
	public void controlloGravita(double d, double y) {

//		while((! (world.getCell(x+1, y) instanceof EnvironmentGround)) 
//		   && (! (world.getCell(x+1, y) instanceof EnvironmentElevator)))
//		{
//			setX(x + 1);
//			System.out.println("downWHILE "+x+" "+y);	
//			x++;
//			world.update();
//			
//		}
//		//setX(x - 1);
	}

	public abstract int getLife() ;
	public abstract void setLife(int life) ;
	public abstract void setScore(int money);
	public abstract int getScore();
    // fare altra classe
    
    
}